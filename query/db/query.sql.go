// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"
)

const projectCount = `-- name: ProjectCount :one
SELECT COUNT(*) FROM projects
`

func (q *Queries) ProjectCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, projectCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const projectInsert = `-- name: ProjectInsert :exec
INSERT INTO projects (name, url, has_ui, points) VALUES(?, ?, ?, ?)
`

type ProjectInsertParams struct {
	Name   string
	Url    string
	HasUi  int64
	Points int64
}

func (q *Queries) ProjectInsert(ctx context.Context, arg ProjectInsertParams) error {
	_, err := q.db.ExecContext(ctx, projectInsert,
		arg.Name,
		arg.Url,
		arg.HasUi,
		arg.Points,
	)
	return err
}

const projectsGetAll = `-- name: ProjectsGetAll :many
SELECT name, url, has_ui, points FROM projects ORDER BY name ASC
`

func (q *Queries) ProjectsGetAll(ctx context.Context) ([]Project, error) {
	rows, err := q.db.QueryContext(ctx, projectsGetAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Project{}
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.Name,
			&i.Url,
			&i.HasUi,
			&i.Points,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const projectsGetNoUI = `-- name: ProjectsGetNoUI :many
SELECT name, url, has_ui, points FROM projects WHERE has_ui = 0 ORDER BY name ASC
`

func (q *Queries) ProjectsGetNoUI(ctx context.Context) ([]Project, error) {
	rows, err := q.db.QueryContext(ctx, projectsGetNoUI)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Project{}
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.Name,
			&i.Url,
			&i.HasUi,
			&i.Points,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const projectsGetUI = `-- name: ProjectsGetUI :many
SELECT name, url, has_ui, points FROM projects WHERE has_ui = 1 AND ? <= points AND points <= ? ORDER BY name ASC
`

type ProjectsGetUIParams struct {
	Points   int64
	Points_2 int64
}

func (q *Queries) ProjectsGetUI(ctx context.Context, arg ProjectsGetUIParams) ([]Project, error) {
	rows, err := q.db.QueryContext(ctx, projectsGetUI, arg.Points, arg.Points_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Project{}
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.Name,
			&i.Url,
			&i.HasUi,
			&i.Points,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
